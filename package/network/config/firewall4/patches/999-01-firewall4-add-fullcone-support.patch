From cbcd66a2a09b78ff723c2db202186658ed9bf30d Mon Sep 17 00:00:00 2001
From: Syrone Wong <wong.syrone@gmail.com>
Date: Sat, 9 Apr 2022 13:24:19 +0800
Subject: [PATCH] firewall4: add fullcone support

fullcone is drop-in replacement of masq for non-udp traffic

fullcone should attach to prerouting and postrouting hook directly

add runtime fullcone rule check, disable it globally if fullcone expr is
invalid
---
 root/etc/config/firewall                      |  2 +
 root/usr/share/firewall4/templates/ruleset.uc | 13 +++++-
 .../firewall4/templates/zone-fullcone.uc      |  4 ++
 root/usr/share/ucode/fw4.uc                   | 45 ++++++++++++++++++-
 4 files changed, 61 insertions(+), 3 deletions(-)
 create mode 100644 root/usr/share/firewall4/templates/zone-fullcone.uc

diff --git a/root/etc/config/firewall b/root/etc/config/firewall
index f4a3322..2f17ad2 100644
--- a/root/etc/config/firewall
+++ b/root/etc/config/firewall
@@ -5,6 +5,7 @@ config defaults
 	option forward		REJECT
 # Uncomment this line to disable ipv6 rules
 #	option disable_ipv6	1
+	option fullcone '1'
 
 config zone
 	option name		lan
@@ -20,6 +21,7 @@ config zone
 	option input		REJECT
 	option output		ACCEPT
 	option forward		REJECT
+	option fullcone '1'
 	option masq		1
 	option mtu_fix		1
 
diff --git a/root/usr/share/firewall4/templates/ruleset.uc b/root/usr/share/firewall4/templates/ruleset.uc
index b402315..09d800f 100644
--- a/root/usr/share/firewall4/templates/ruleset.uc
+++ b/root/usr/share/firewall4/templates/ruleset.uc
@@ -1,3 +1,4 @@
+{# /usr/share/firewall4/templates/ruleset.uc #}
 {% let flowtable_devices = fw4.resolve_offload_devices(); -%}
 
 table inet fw4
@@ -214,6 +215,10 @@ table inet fw4 {
 		{%+ include("zone-jump.uc", { fw4, zone, rule, direction: "dstnat" }) %}
 {%   endfor %}
 {%  endif %}
+{%  if (zone.fullcone): %}
+		{%+ include("zone-fullcone.uc", { fw4, zone, family: 4, direction: "dstnat" }) %}
+		{%+ include("zone-fullcone.uc", { fw4, zone, family: 6, direction: "dstnat" }) %}
+{%  endif %}
 {% endfor %}
 	}
 
@@ -228,6 +233,10 @@ table inet fw4 {
 		{%+ include("zone-jump.uc", { fw4, zone, rule, direction: "srcnat" }) %}
 {%   endfor %}
 {%  endif %}
+{%  if (zone.fullcone): %}
+		{%+ include("zone-fullcone.uc", { fw4, zone, family: 4, direction: "srcnat" }) %}
+		{%+ include("zone-fullcone.uc", { fw4, zone, family: 6, direction: "srcnat" }) %}
+{%  endif %}
 {% endfor %}
 	}
 
@@ -245,14 +254,14 @@ table inet fw4 {
 {%   for (let redirect in fw4.redirects("srcnat_"+zone.name)): %}
 		{%+ include("redirect.uc", { fw4, redirect }) %}
 {%   endfor %}
-{%   if (zone.masq): %}
+{%   if (zone.masq && !zone.fullcone): %}
 {%    for (let saddrs in zone.masq4_src_subnets): %}
 {%     for (let daddrs in zone.masq4_dest_subnets): %}
 		{%+ include("zone-masq.uc", { fw4, zone, family: 4, saddrs, daddrs }) %}
 {%     endfor %}
 {%    endfor %}
 {%   endif %}
-{%   if (zone.masq6): %}
+{%   if (zone.masq6 && !zone.fullcone): %}
 {%    for (let saddrs in zone.masq6_src_subnets): %}
 {%     for (let daddrs in zone.masq6_dest_subnets): %}
 		{%+ include("zone-masq.uc", { fw4, zone, family: 6, saddrs, daddrs }) %}
diff --git a/root/usr/share/firewall4/templates/zone-fullcone.uc b/root/usr/share/firewall4/templates/zone-fullcone.uc
new file mode 100644
index 0000000..0f8340b
--- /dev/null
+++ b/root/usr/share/firewall4/templates/zone-fullcone.uc
@@ -0,0 +1,4 @@
+{# /usr/share/firewall4/templates/zone-fullcone.uc #}
+		meta nfproto {{ fw4.nfproto(family) }} fullcone comment "!fw4: Handle {{ zone.name }} {{
+		fw4.nfproto(family, true)
+}} {{ direction }} fullcone NAT traffic"
diff --git a/root/usr/share/ucode/fw4.uc b/root/usr/share/ucode/fw4.uc
index 0659af6..05e13a0 100644
--- a/root/usr/share/ucode/fw4.uc
+++ b/root/usr/share/ucode/fw4.uc
@@ -1,3 +1,5 @@
+// /usr/share/ucode/fw4.uc
+
 let fs = require("fs");
 let uci = require("uci");
 let ubus = require("ubus");
@@ -419,6 +421,25 @@ function nft_try_hw_offload(devices) {
 	return (rc == 0);
 }
 
+function nft_try_fullcone() {
+	let nft_test =
+		'add table inet fw4-fullcone-test; ' +
+		'add chain inet fw4-fullcone-test dstnat { ' +
+			'type nat hook prerouting priority -100; policy accept; ' +
+			'fullcone; ' +
+		'}; ' +
+		'add chain inet fw4-fullcone-test srcnat { ' +
+			'type nat hook postrouting priority -100; policy accept; ' +
+			'fullcone; ' +
+		'}; ';
+	let cmd = sprintf("/usr/sbin/nft -c '%s' 2>/dev/null", replace(nft_test, "'", "'\\''"));
+	let ok = system(cmd) == 0;
+	if (!ok) {
+		warn("nft_try_fullcone: cmd "+ cmd + "\n");
+	}
+	return ok;
+}
+
 
 return {
 	read_kernel_version: function() {
@@ -1382,6 +1403,7 @@ return {
 			"dnat",
 			"snat",
 			"masquerade",
+			"fullcone",
 			"accept",
 			"reject",
 			"drop"
@@ -1787,6 +1809,7 @@ return {
 		}
 
 		let defs = this.parse_options(data, {
+			fullcone: [ "bool", "0" ],
 			input: [ "policy", "drop" ],
 			output: [ "policy", "drop" ],
 			forward: [ "policy", "drop" ],
@@ -1819,6 +1842,11 @@ return {
 
 		delete defs.syn_flood;
 
+		if (!nft_try_fullcone()) {
+			delete defs.fullcone;
+			warn("nft_try_fullcone failed, disable fullcone globally\n");
+		}
+
 		this.state.defaults = defs;
 	},
 
@@ -1843,6 +1871,7 @@ return {
 			masq_dest: [ "network", null, PARSE_LIST ],
 
 			masq6: [ "bool" ],
+			fullcone: [ "bool", "0" ],
 
 			extra: [ "string", null, UNSUPPORTED ],
 			extra_src: [ "string", null, UNSUPPORTED ],
@@ -1873,6 +1902,14 @@ return {
 			return;
 		}
 
+		if (this.state.defaults && !this.state.defaults.fullcone) {
+			this.warn_section(data, "fullcone in defaults not enabled, ignore zone fullcone setting");
+			zone.fullcone = false;
+		}
+		if (zone.fullcone) {
+			this.warn_section(data, "fullcone enabled for zone '" + zone.name + "'");
+		}
+
 		if (zone.mtu_fix && this.kernel < 0x040a0000) {
 			this.warn_section(data, "option 'mtu_fix' requires kernel 4.10 or later");
 			return;
@@ -2041,10 +2078,16 @@ return {
 		zone.related_subnets = related_subnets;
 		zone.related_physdevs = related_physdevs;
 
+		if (zone.fullcone) {
+			// should attach to chain srcnat(postrouting) and dstnat(prerouting) directly, this is NOT interface specific
+			zone.dflags.snat = false;
+			zone.dflags.dnat = false;
+		}
+
 		if (zone.masq || zone.masq6)
 			zone.dflags.snat = true;
 
-		if ((zone.auto_helper && !(zone.masq || zone.masq6)) || length(zone.helper)) {
+		if ((zone.auto_helper && !(zone.masq || zone.masq6 || zone.fullcone)) || length(zone.helper)) {
 			zone.dflags.helper = true;
 
 			for (let helper in (length(zone.helper) ? zone.helper : this.state.helpers)) {
-- 
2.33.0.windows.2

